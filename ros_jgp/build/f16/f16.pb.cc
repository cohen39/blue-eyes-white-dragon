// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: f16.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "f16.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* F16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F16_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_f16_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_f16_2eproto() {
  protobuf_AddDesc_f16_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "f16.proto");
  GOOGLE_CHECK(file != NULL);
  F16_descriptor_ = file->message_type(0);
  static const int F16_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, left_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, right_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, left_elevator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, right_elevator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, rudder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, cmd_left_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, cmd_right_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, cmd_left_elevator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, cmd_right_elevator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, cmd_rudder_),
  };
  F16_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      F16_descriptor_,
      F16::default_instance_,
      F16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, _has_bits_[0]),
      -1,
      -1,
      sizeof(F16),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F16, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_f16_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      F16_descriptor_, &F16::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_f16_2eproto() {
  delete F16::default_instance_;
  delete F16_reflection_;
}

void protobuf_AddDesc_f16_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_f16_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tf16.proto\022\013gazebo.msgs\"\361\001\n\003F16\022\024\n\014left"
    "_aileron\030\001 \001(\002\022\025\n\rright_aileron\030\002 \001(\002\022\025\n"
    "\rleft_elevator\030\003 \001(\002\022\026\n\016right_elevator\030\004"
    " \001(\002\022\016\n\006rudder\030\005 \001(\002\022\030\n\020cmd_left_aileron"
    "\030\006 \001(\002\022\031\n\021cmd_right_aileron\030\007 \001(\002\022\031\n\021cmd"
    "_left_elevator\030\010 \001(\002\022\032\n\022cmd_right_elevat"
    "or\030\t \001(\002\022\022\n\ncmd_rudder\030\n \001(\002", 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "f16.proto", &protobuf_RegisterTypes);
  F16::default_instance_ = new F16();
  F16::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_f16_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_f16_2eproto {
  StaticDescriptorInitializer_f16_2eproto() {
    protobuf_AddDesc_f16_2eproto();
  }
} static_descriptor_initializer_f16_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int F16::kLeftAileronFieldNumber;
const int F16::kRightAileronFieldNumber;
const int F16::kLeftElevatorFieldNumber;
const int F16::kRightElevatorFieldNumber;
const int F16::kRudderFieldNumber;
const int F16::kCmdLeftAileronFieldNumber;
const int F16::kCmdRightAileronFieldNumber;
const int F16::kCmdLeftElevatorFieldNumber;
const int F16::kCmdRightElevatorFieldNumber;
const int F16::kCmdRudderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

F16::F16()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.F16)
}

void F16::InitAsDefaultInstance() {
}

F16::F16(const F16& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.F16)
}

void F16::SharedCtor() {
  _cached_size_ = 0;
  left_aileron_ = 0;
  right_aileron_ = 0;
  left_elevator_ = 0;
  right_elevator_ = 0;
  rudder_ = 0;
  cmd_left_aileron_ = 0;
  cmd_right_aileron_ = 0;
  cmd_left_elevator_ = 0;
  cmd_right_elevator_ = 0;
  cmd_rudder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F16::~F16() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.F16)
  SharedDtor();
}

void F16::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F16::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F16_descriptor_;
}

const F16& F16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f16_2eproto();
  return *default_instance_;
}

F16* F16::default_instance_ = NULL;

F16* F16::New(::google::protobuf::Arena* arena) const {
  F16* n = new F16;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void F16::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.F16)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(F16, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<F16*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(left_aileron_, cmd_left_elevator_);
  }
  ZR_(cmd_right_elevator_, cmd_rudder_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool F16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.F16)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_aileron = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_aileron_)));
          set_has_left_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right_aileron;
        break;
      }

      // optional float right_aileron = 2;
      case 2: {
        if (tag == 21) {
         parse_right_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_aileron_)));
          set_has_right_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_left_elevator;
        break;
      }

      // optional float left_elevator = 3;
      case 3: {
        if (tag == 29) {
         parse_left_elevator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_elevator_)));
          set_has_left_elevator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_right_elevator;
        break;
      }

      // optional float right_elevator = 4;
      case 4: {
        if (tag == 37) {
         parse_right_elevator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_elevator_)));
          set_has_right_elevator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_rudder;
        break;
      }

      // optional float rudder = 5;
      case 5: {
        if (tag == 45) {
         parse_rudder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rudder_)));
          set_has_rudder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cmd_left_aileron;
        break;
      }

      // optional float cmd_left_aileron = 6;
      case 6: {
        if (tag == 53) {
         parse_cmd_left_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_aileron_)));
          set_has_cmd_left_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cmd_right_aileron;
        break;
      }

      // optional float cmd_right_aileron = 7;
      case 7: {
        if (tag == 61) {
         parse_cmd_right_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_aileron_)));
          set_has_cmd_right_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_cmd_left_elevator;
        break;
      }

      // optional float cmd_left_elevator = 8;
      case 8: {
        if (tag == 69) {
         parse_cmd_left_elevator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_elevator_)));
          set_has_cmd_left_elevator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cmd_right_elevator;
        break;
      }

      // optional float cmd_right_elevator = 9;
      case 9: {
        if (tag == 77) {
         parse_cmd_right_elevator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_elevator_)));
          set_has_cmd_right_elevator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_cmd_rudder;
        break;
      }

      // optional float cmd_rudder = 10;
      case 10: {
        if (tag == 85) {
         parse_cmd_rudder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_rudder_)));
          set_has_cmd_rudder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.F16)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.F16)
  return false;
#undef DO_
}

void F16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.F16)
  // optional float left_aileron = 1;
  if (has_left_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_aileron(), output);
  }

  // optional float right_aileron = 2;
  if (has_right_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_aileron(), output);
  }

  // optional float left_elevator = 3;
  if (has_left_elevator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->left_elevator(), output);
  }

  // optional float right_elevator = 4;
  if (has_right_elevator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->right_elevator(), output);
  }

  // optional float rudder = 5;
  if (has_rudder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rudder(), output);
  }

  // optional float cmd_left_aileron = 6;
  if (has_cmd_left_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cmd_left_aileron(), output);
  }

  // optional float cmd_right_aileron = 7;
  if (has_cmd_right_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cmd_right_aileron(), output);
  }

  // optional float cmd_left_elevator = 8;
  if (has_cmd_left_elevator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cmd_left_elevator(), output);
  }

  // optional float cmd_right_elevator = 9;
  if (has_cmd_right_elevator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cmd_right_elevator(), output);
  }

  // optional float cmd_rudder = 10;
  if (has_cmd_rudder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->cmd_rudder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.F16)
}

::google::protobuf::uint8* F16::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.F16)
  // optional float left_aileron = 1;
  if (has_left_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_aileron(), target);
  }

  // optional float right_aileron = 2;
  if (has_right_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_aileron(), target);
  }

  // optional float left_elevator = 3;
  if (has_left_elevator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->left_elevator(), target);
  }

  // optional float right_elevator = 4;
  if (has_right_elevator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->right_elevator(), target);
  }

  // optional float rudder = 5;
  if (has_rudder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rudder(), target);
  }

  // optional float cmd_left_aileron = 6;
  if (has_cmd_left_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cmd_left_aileron(), target);
  }

  // optional float cmd_right_aileron = 7;
  if (has_cmd_right_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cmd_right_aileron(), target);
  }

  // optional float cmd_left_elevator = 8;
  if (has_cmd_left_elevator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cmd_left_elevator(), target);
  }

  // optional float cmd_right_elevator = 9;
  if (has_cmd_right_elevator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cmd_right_elevator(), target);
  }

  // optional float cmd_rudder = 10;
  if (has_cmd_rudder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->cmd_rudder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.F16)
  return target;
}

int F16::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.F16)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float left_aileron = 1;
    if (has_left_aileron()) {
      total_size += 1 + 4;
    }

    // optional float right_aileron = 2;
    if (has_right_aileron()) {
      total_size += 1 + 4;
    }

    // optional float left_elevator = 3;
    if (has_left_elevator()) {
      total_size += 1 + 4;
    }

    // optional float right_elevator = 4;
    if (has_right_elevator()) {
      total_size += 1 + 4;
    }

    // optional float rudder = 5;
    if (has_rudder()) {
      total_size += 1 + 4;
    }

    // optional float cmd_left_aileron = 6;
    if (has_cmd_left_aileron()) {
      total_size += 1 + 4;
    }

    // optional float cmd_right_aileron = 7;
    if (has_cmd_right_aileron()) {
      total_size += 1 + 4;
    }

    // optional float cmd_left_elevator = 8;
    if (has_cmd_left_elevator()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float cmd_right_elevator = 9;
    if (has_cmd_right_elevator()) {
      total_size += 1 + 4;
    }

    // optional float cmd_rudder = 10;
    if (has_cmd_rudder()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F16::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.F16)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const F16* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const F16>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.F16)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.F16)
    MergeFrom(*source);
  }
}

void F16::MergeFrom(const F16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.F16)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_aileron()) {
      set_left_aileron(from.left_aileron());
    }
    if (from.has_right_aileron()) {
      set_right_aileron(from.right_aileron());
    }
    if (from.has_left_elevator()) {
      set_left_elevator(from.left_elevator());
    }
    if (from.has_right_elevator()) {
      set_right_elevator(from.right_elevator());
    }
    if (from.has_rudder()) {
      set_rudder(from.rudder());
    }
    if (from.has_cmd_left_aileron()) {
      set_cmd_left_aileron(from.cmd_left_aileron());
    }
    if (from.has_cmd_right_aileron()) {
      set_cmd_right_aileron(from.cmd_right_aileron());
    }
    if (from.has_cmd_left_elevator()) {
      set_cmd_left_elevator(from.cmd_left_elevator());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd_right_elevator()) {
      set_cmd_right_elevator(from.cmd_right_elevator());
    }
    if (from.has_cmd_rudder()) {
      set_cmd_rudder(from.cmd_rudder());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void F16::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.F16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F16::CopyFrom(const F16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.F16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F16::IsInitialized() const {

  return true;
}

void F16::Swap(F16* other) {
  if (other == this) return;
  InternalSwap(other);
}
void F16::InternalSwap(F16* other) {
  std::swap(left_aileron_, other->left_aileron_);
  std::swap(right_aileron_, other->right_aileron_);
  std::swap(left_elevator_, other->left_elevator_);
  std::swap(right_elevator_, other->right_elevator_);
  std::swap(rudder_, other->rudder_);
  std::swap(cmd_left_aileron_, other->cmd_left_aileron_);
  std::swap(cmd_right_aileron_, other->cmd_right_aileron_);
  std::swap(cmd_left_elevator_, other->cmd_left_elevator_);
  std::swap(cmd_right_elevator_, other->cmd_right_elevator_);
  std::swap(cmd_rudder_, other->cmd_rudder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata F16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F16_descriptor_;
  metadata.reflection = F16_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// F16

// optional float left_aileron = 1;
bool F16::has_left_aileron() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void F16::set_has_left_aileron() {
  _has_bits_[0] |= 0x00000001u;
}
void F16::clear_has_left_aileron() {
  _has_bits_[0] &= ~0x00000001u;
}
void F16::clear_left_aileron() {
  left_aileron_ = 0;
  clear_has_left_aileron();
}
 float F16::left_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.left_aileron)
  return left_aileron_;
}
 void F16::set_left_aileron(float value) {
  set_has_left_aileron();
  left_aileron_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.left_aileron)
}

// optional float right_aileron = 2;
bool F16::has_right_aileron() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void F16::set_has_right_aileron() {
  _has_bits_[0] |= 0x00000002u;
}
void F16::clear_has_right_aileron() {
  _has_bits_[0] &= ~0x00000002u;
}
void F16::clear_right_aileron() {
  right_aileron_ = 0;
  clear_has_right_aileron();
}
 float F16::right_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.right_aileron)
  return right_aileron_;
}
 void F16::set_right_aileron(float value) {
  set_has_right_aileron();
  right_aileron_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.right_aileron)
}

// optional float left_elevator = 3;
bool F16::has_left_elevator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void F16::set_has_left_elevator() {
  _has_bits_[0] |= 0x00000004u;
}
void F16::clear_has_left_elevator() {
  _has_bits_[0] &= ~0x00000004u;
}
void F16::clear_left_elevator() {
  left_elevator_ = 0;
  clear_has_left_elevator();
}
 float F16::left_elevator() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.left_elevator)
  return left_elevator_;
}
 void F16::set_left_elevator(float value) {
  set_has_left_elevator();
  left_elevator_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.left_elevator)
}

// optional float right_elevator = 4;
bool F16::has_right_elevator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void F16::set_has_right_elevator() {
  _has_bits_[0] |= 0x00000008u;
}
void F16::clear_has_right_elevator() {
  _has_bits_[0] &= ~0x00000008u;
}
void F16::clear_right_elevator() {
  right_elevator_ = 0;
  clear_has_right_elevator();
}
 float F16::right_elevator() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.right_elevator)
  return right_elevator_;
}
 void F16::set_right_elevator(float value) {
  set_has_right_elevator();
  right_elevator_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.right_elevator)
}

// optional float rudder = 5;
bool F16::has_rudder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void F16::set_has_rudder() {
  _has_bits_[0] |= 0x00000010u;
}
void F16::clear_has_rudder() {
  _has_bits_[0] &= ~0x00000010u;
}
void F16::clear_rudder() {
  rudder_ = 0;
  clear_has_rudder();
}
 float F16::rudder() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.rudder)
  return rudder_;
}
 void F16::set_rudder(float value) {
  set_has_rudder();
  rudder_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.rudder)
}

// optional float cmd_left_aileron = 6;
bool F16::has_cmd_left_aileron() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void F16::set_has_cmd_left_aileron() {
  _has_bits_[0] |= 0x00000020u;
}
void F16::clear_has_cmd_left_aileron() {
  _has_bits_[0] &= ~0x00000020u;
}
void F16::clear_cmd_left_aileron() {
  cmd_left_aileron_ = 0;
  clear_has_cmd_left_aileron();
}
 float F16::cmd_left_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.cmd_left_aileron)
  return cmd_left_aileron_;
}
 void F16::set_cmd_left_aileron(float value) {
  set_has_cmd_left_aileron();
  cmd_left_aileron_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.cmd_left_aileron)
}

// optional float cmd_right_aileron = 7;
bool F16::has_cmd_right_aileron() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void F16::set_has_cmd_right_aileron() {
  _has_bits_[0] |= 0x00000040u;
}
void F16::clear_has_cmd_right_aileron() {
  _has_bits_[0] &= ~0x00000040u;
}
void F16::clear_cmd_right_aileron() {
  cmd_right_aileron_ = 0;
  clear_has_cmd_right_aileron();
}
 float F16::cmd_right_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.cmd_right_aileron)
  return cmd_right_aileron_;
}
 void F16::set_cmd_right_aileron(float value) {
  set_has_cmd_right_aileron();
  cmd_right_aileron_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.cmd_right_aileron)
}

// optional float cmd_left_elevator = 8;
bool F16::has_cmd_left_elevator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void F16::set_has_cmd_left_elevator() {
  _has_bits_[0] |= 0x00000080u;
}
void F16::clear_has_cmd_left_elevator() {
  _has_bits_[0] &= ~0x00000080u;
}
void F16::clear_cmd_left_elevator() {
  cmd_left_elevator_ = 0;
  clear_has_cmd_left_elevator();
}
 float F16::cmd_left_elevator() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.cmd_left_elevator)
  return cmd_left_elevator_;
}
 void F16::set_cmd_left_elevator(float value) {
  set_has_cmd_left_elevator();
  cmd_left_elevator_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.cmd_left_elevator)
}

// optional float cmd_right_elevator = 9;
bool F16::has_cmd_right_elevator() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void F16::set_has_cmd_right_elevator() {
  _has_bits_[0] |= 0x00000100u;
}
void F16::clear_has_cmd_right_elevator() {
  _has_bits_[0] &= ~0x00000100u;
}
void F16::clear_cmd_right_elevator() {
  cmd_right_elevator_ = 0;
  clear_has_cmd_right_elevator();
}
 float F16::cmd_right_elevator() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.cmd_right_elevator)
  return cmd_right_elevator_;
}
 void F16::set_cmd_right_elevator(float value) {
  set_has_cmd_right_elevator();
  cmd_right_elevator_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.cmd_right_elevator)
}

// optional float cmd_rudder = 10;
bool F16::has_cmd_rudder() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void F16::set_has_cmd_rudder() {
  _has_bits_[0] |= 0x00000200u;
}
void F16::clear_has_cmd_rudder() {
  _has_bits_[0] &= ~0x00000200u;
}
void F16::clear_cmd_rudder() {
  cmd_rudder_ = 0;
  clear_has_cmd_rudder();
}
 float F16::cmd_rudder() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.F16.cmd_rudder)
  return cmd_rudder_;
}
 void F16::set_cmd_rudder(float value) {
  set_has_cmd_rudder();
  cmd_rudder_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.F16.cmd_rudder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
